# sysbasiccmd
# * see the repository LICENSE, README, and CONTRIBUTING files for more information

# spell-checker:ignore (libs) libselinux gethostid procfs

[package]
name = "easybox"
version = "0.0.1"
authors = ["openeuler developers"]
license = "MulanPSL-2.0"
description = "sysbasiccmd ~ GNU coreutils (updated); implemented as universal (cross-platform) utils, written in Rust"
default-run = "easybox"

homepage = "https://gitee.com/openeuler/easybox"
repository = "https://gitee.com/openeuler/easybox"
readme = "README.md"
keywords = ["coreutils", "easybox", "util-linux", "cli", "utility"]
categories = ["command-line-utilities"]
rust-version = "1.60.0"
edition = "2021"

build = "build.rs"

[features]
default = [ "linux" ]
linux = [
    "base32",
    "flock",
    "hwclock",
    "pstree",
    "taskset",
    "xargs"
]
##
# * bypass/override ~ translate 'test' feature name to avoid dependency collision with rust core 'test' crate (o/w surfaces as compiler errors during testing)
oedoc = [ "zip" ]

[workspace]
members = [
  # external binaries
  "src/oe/base32",
  "src/oe/flock",
  "src/oe/hwclock",
  "src/oe/pstree",
  "src/oe/taskset",
  "src/oe/xargs"
]

[dependencies]
clap = { version = "3.2.0", features = ["wrap_help", "cargo"] }
clap_complete = "3.1.0"
once_cell = "1.13.1"
phf = "0.10.1"
selinux = { version="0.3.0", optional = true }
textwrap = { version="0.15.0", features=["terminal_size"] }
uucore = { version=">=0.0.16", package="uucore", path="src/uucore" }
zip = { version = "0.6.0", optional=true, default_features=false, features=["deflate"] }
# * uutils
base32  = { optional=true, version="0.0.16", package="oe_base32", path="src/oe/base32" }
flock={optional = true,version = "0.0.1",package = "oe_flock",path = "src/oe/flock"}
hwclock  = { optional=true, version="0.0.1", package="oe_hwclock", path="src/oe/hwclock" }
pstree = { optional=true, version="0.0.1", package="oe_pstree", path="src/oe/pstree" }
taskset  = { optional=true, version="0.0.1", package="oe_taskset", path="src/oe/taskset" }
xargs = { optional=true, version="0.0.1", package="oe_xargs", path="src/oe/xargs" }

# this breaks clippy linting with: "tests/by-util/test_factor_benches.rs: No such file or directory (os error 2)"
# factor_benches = { optional = true, version = "0.0.0", package = "uu_factor_benches", path = "tests/benches/factor" }

#
# * pinned transitive dependencies
# Not needed for now. Keep as examples:
#pin_cc = { version="1.0.61, < 1.0.62", package="cc" } ## cc v1.0.62 has compiler errors for MinRustV v1.32.0, requires 1.34 (for `std::str::split_ascii_whitespace()`)

[dev-dependencies]
chrono = { version="^0.4.19", default-features=false, features=["std", "alloc", "clock"]}
conv = "0.3.0"
filetime = "0.2.0"
glob = "0.3.0"
libc = "0.2.0"
pretty_assertions = "1.0.0"
rand = "0.8.0"
regex = "1.6.0"
sha1 = { version="0.10.0", features=["std"] }
tempfile = "3.0.0"
#time = "0.3.25"
unindent = "0.1.3"
uucore = { version=">=0.0.16", package="uucore", path="src/uucore", features=["entries", "process"] }
walkdir = "2.2.0"
atty = "0.2.0"
hex-literal = "0.3.1"

[target.'cfg(any(target_os = "linux", target_os = "android"))'.dev-dependencies]
procfs = { version = "0.14.0", default-features = false }
rlimit = "0.8.3"

[build-dependencies]
phf_codegen = "0.10.0"

[[bin]]
name = "easybox"
path = "src/bin/coreutils.rs"

[[bin]]
name = "oedoc"
path = "src/bin/uudoc.rs"
required-features = ["oedoc"]
